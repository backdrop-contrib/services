<?php
/**
 * @file
 * Install, uninstall and update the Services module.
 */

/**
 * Implements hook_schema().
 */
function services_schema() {
  $schema = array();

  $schema['services_user'] = array(
    'description' => 'Stores users created/updated by services.',
    'fields' => array(
      'uid' => array(
        'type'        => 'int',
        'description' => 'User id that has been created by Backdrop',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the node was most recently created by services.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the user was most recently updated by services.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid'),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function services_requirements($phase) {
  $requirements = array();
  $t = get_t();
  // Warn users of the possible threat.
  if ($phase == 'runtime') {
    //Pull endpoints that do not have services authentication enabled
    module_load_include('module', 'services');
    $endpoints = services_endpoint_load_all();
    $items = array();
    // Build our items array
    foreach ($endpoints as $endpoint) {
      if (empty($endpoint->disabled) && empty($endpoint->authentication)) {
        $items[] = l($endpoint->name, 'admin/structure/services/list/' . $endpoint->name . '/edit');
      }
    }
    // theme the endpoints list
    $endpoints = '';
    if (!empty($items)) {
      $endpoints = theme('item_list', array('items' => $items));
    }
    // Only display the list if we have at least one endpoint without services authentication.
    if (count($items)) {
      $requirements['services'] = array(
        'description' => $t('Services authentication mechanism has not been enabled for the following endpoints. Requests to these endpoints will always be anonymous.'),
        'severity' => REQUIREMENT_WARNING,
        'value' => $endpoints,
        'title' => 'Services Authentication Mechanism',
      );
    } else {
      $requirements['services'] = array(
        'severity' => REQUIREMENT_OK,
        'value' => 'Enabled for all Endpoints',
        'title' => 'Services Authentication Mechanism',
      );
    }

    $services_security_update = config_get('services.settings', 'services_security_update_1');
    if(!$services_security_update) {
      $url = url('admin/config/services/services-security');
      $requirements['services'] = array(
        'description' => $t('Services has issued a security update with the most recent module release. Administrative steps are required to secure your Backdrop installation <a href="!url">here</a>.', array('!url' => $url)),
        'severity' => REQUIREMENT_ERROR,
        'value' => 'Steps needed',
        'title' => 'Services Authentication Mechanism',
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function services_install() {
  $ret = array();
  //Set our security update to true since it wont need to be displayed
  //on the status report page
  // variable_set('services_security_update_1', TRUE);
  config_set('services.settings', "services_resource_index_page_size", 20);
  config_set('services.settings', 'file_public_path', '');
  config_set('services.settings', 'password_inc', 'includes/password.inc');
  config_set('services.settings', 'rest_server_default_response_format', 'json');
  config_set('services.settings', 'services_allowed_create_content_types', array());
  config_set('services.settings', 'services_comment_index_page_size', 20);
  config_set('services.settings', 'services_comment_save_button_resource_create', t('Save'));
  config_set('services.settings', 'services_comment_save_button_resource_update', t('Save'));
  config_set('services.settings', 'services_file_index_page_size', 20);
  config_set('services.settings', 'services_flood_control_enabled', TRUE);
  config_set('services.settings', 'services_flood_control_enabled', TRUE);
  config_set('services.settings', 'services_node_index_page_size', 20);
  config_set('services.settings', 'services_node_index_page_size', 20);
  config_set('services.settings', 'services_node_index_page_size', 20);
  config_set('services.settings', 'services_node_save_button_post_resource_create', t('Save'));
  config_set('services.settings', 'services_node_save_button_page_resource_update', t('Save'));
  config_set('services.settings', 'services_oauth_authentication_levels', array());
  config_set('services.settings', 'services_oauth_authorization_settings', array());
  config_set('services.settings', 'services_rest_server_factory_class', 'ServicesRESTServerFactory');
  config_set('services.settings', 'services_security_reset_limit_per_batch', 10);
  config_set('services.settings', 'services_security_update_1', FALSE);
  config_set('services.settings', 'services_security_update_1', FALSE);
  config_set('services.settings', 'services_taxonomy_term_index_page_size', 20);
  config_set('services.settings', 'services_taxonomy_vocabulary_index_page_size', 20);
  config_set('services.settings', 'services_user_create_button_resource_create', t('Create new account'));
  config_set('services.settings', 'services_user_index_page_size', 20);
  config_set('services.settings', 'services_user_save_button_resource_update', t('Save'));
  config_set('services.settings', 'simpletest_maximum_redirects', 5);
  config_set('services.settings', 'user_cancel_method', 'user_cancel_block');
  config_set('services.settings', 'user_failed_login_identifier_uid_only', FALSE);
  config_set('services.settings', 'user_failed_login_ip_limit', 50);
  config_set('services.settings', 'user_failed_login_ip_window', 3600);
  config_set('services.settings', 'user_failed_login_ip_window', 3600);
  config_set('services.settings', 'user_failed_login_ip_window', 3600);
  config_set('services.settings', 'user_failed_login_user_limit', 5);
  config_set('services.settings', 'user_failed_login_user_window', 21600);
  config_set('services.settings', 'user_failed_login_user_window', 21600);
  config_set('services.settings', 'user_failed_login_user_window', 21600);

}
/**
 * Implements hook_uninstall().
 */
function services_uninstall() {
  $ret = array();

  // Drop legacy tables
  $legacy_tables = array('services_keys', 'services_timestamp_nonce');
  foreach ($legacy_tables as $table) {
    if (db_table_exists($table)) {
      db_drop_table($ret, $table);
    }
  }

  variable_del('services_use_key');
  variable_del('services_use_sessid');
  variable_del('services_debug');
  variable_del('services_auth_module');
}

/**
 * Move services endpoints into config files.
 */
function services_update_1000() {
  if (!db_table_exists('services_endpoint')) {
    return;
  }

  $services_endpoints = db_query("SELECT * FROM {services_endpoint}")->fetchAll();
  foreach ($services_endpoints as $services_endpoint) {
    $data = array(
      'name' => $services_endpoint->name,
      'server' => $services_endpoint->server,
      'path' => $services_endpoint->path,
      'authentication' => unserialize($services_endpoint->authentication),
      'server_settings' => unserialize($services_endpoint->server_settings),
      'resources' => unserialize($services_endpoint->resources),
      'status' => $services_endpoint->status,
      'debug' => $services_endpoint->debug,
    );

    $config = config('services.endpoint.' . $services_endpoint->name);
    $config->setData($data);
    $config->save();
  }

  db_drop_table('services_endpoint');
}
